{"version":3,"sources":["../../../../src/validation/custom/name-exists/name-exists.rule.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\nimport { DataSource, ILike, Not } from \"typeorm\";\n\n@ValidatorConstraint({ name: 'NameExists', async: true })\n@Injectable()\nexport class NameExistsRule implements ValidatorConstraintInterface {\n  constructor(private dataSource: DataSource) {}\n\n  async validate(value: any, args: ValidationArguments) {\n    try {\n      const [model] = args.constraints;\n      const input = (args.object as any);\n      const id: string = input['id'];\n      let query = { name: ILike(value) }; \n      if(id) {\n        query['id'] = Not(id);\n      }\n      await this.dataSource.getRepository(model).findOneByOrFail(query);\n    } catch (e) {\n      // console.log(e)\n      return true;\n    }\n\n    return false;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Name already exists!`;\n  }\n}"],"names":["NameExistsRule","validate","value","args","model","constraints","input","object","id","query","name","ILike","Not","dataSource","getRepository","findOneByOrFail","e","defaultMessage","constructor","ValidatorConstraint","async","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAMaA;;;eAAAA;;;wBANc;gCAC4D;yBAChD;;;;;;;;;;AAIhC,IAAA,AAAMA,iBAAN,MAAMA;IAGX,MAAMC,SAASC,KAAU,EAAEC,IAAyB,EAAE;QACpD,IAAI;YACF,MAAM,CAACC,MAAM,GAAGD,KAAKE,WAAW;YAChC,MAAMC,QAASH,KAAKI,MAAM;YAC1B,MAAMC,KAAaF,KAAK,CAAC,KAAK;YAC9B,IAAIG,QAAQ;gBAAEC,MAAMC,IAAAA,cAAK,EAACT;YAAO;YACjC,IAAGM,IAAI;gBACLC,KAAK,CAAC,KAAK,GAAGG,IAAAA,YAAG,EAACJ;YACpB;YACA,MAAM,IAAI,CAACK,UAAU,CAACC,aAAa,CAACV,OAAOW,eAAe,CAACN;QAC7D,EAAE,OAAOO,GAAG;YACV,iBAAiB;YACjB,OAAO;QACT;QAEA,OAAO;IACT;IAEAC,eAAed,IAAyB,EAAE;QACxC,OAAO,CAAC,oBAAoB,CAAC;IAC/B;IAtBAe,YAAY,AAAQL,UAAsB,CAAE;aAAxBA,aAAAA;IAAyB;AAuB/C;AAxBab;IAFZmB,IAAAA,mCAAmB,EAAC;QAAET,MAAM;QAAcU,OAAO;IAAK;IACtDC,IAAAA,kBAAU;;;eAEuB,mBAAU,4BAAV,mBAAU;;GAD/BrB"}