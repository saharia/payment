{"version":3,"sources":["../../../../src/orm-config/entity/authentication/user.entity.ts"],"sourcesContent":["import { Field, ObjectType } from \"@nestjs/graphql\";\nimport { BeforeInsert, Column, Entity, ManyToMany, OneToMany, Relation } from \"typeorm\";\nimport { BaseEntityColumn } from \"../base.entity\";\nimport { Brand } from \"../payment/brand.entity\";\nimport { Role } from \"./role.entity\";\nimport * as bcrypt from 'bcrypt';\n@ObjectType()\n@Entity()\nexport class User extends BaseEntityColumn {\n\n  @Field(() => String)\n  @Column()\n  email: string;\n\n  @Column({ nullable: true })\n  password: string;\n\n  @Field(() => String)\n  @Column()\n  firstName: string;\n  \n  @Field(() => String)\n  @Column()\n  lastName: string;\n  \n  @Field(() => String, { nullable: true })\n  @Column({ nullable: true })\n  profilePicture: string;\n\n  @Field(() => [Role], { nullable: true })\n  @ManyToMany(() => Role, (role) => role.users)\n  roles: Role[];\n\n  @Field(() => [Brand])\n  @OneToMany(() => Brand, (brand) => brand.user)\n  brands: Relation<Brand>[];\n\n  @BeforeInsert()\n  async hashPassword() {\n    const passwordSalt: number = Number(process.env.PASSWORD_SALT);\n    const salt = await bcrypt.genSalt(passwordSalt);\n    const password = await bcrypt.hash(this.password, salt);\n    // console.log(salt, password);\n    this.password = password;\n  }\n\n}\n"],"names":["User","BaseEntityColumn","hashPassword","passwordSalt","Number","process","env","PASSWORD_SALT","salt","bcrypt","genSalt","password","hash","Field","String","Column","nullable","Role","ManyToMany","role","users","Brand","OneToMany","brand","user","BeforeInsert","ObjectType","Entity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAQaA;;;eAAAA;;;yBARqB;yBAC4C;4BAC7C;6BACX;4BACD;gEACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGjB,IAAA,AAAMA,OAAN,MAAMA,aAAaC,4BAAgB;IA6BxC,MACMC,eAAe;QACnB,MAAMC,eAAuBC,OAAOC,QAAQC,GAAG,CAACC,aAAa;QAC7D,MAAMC,OAAO,MAAMC,QAAOC,OAAO,CAACP;QAClC,MAAMQ,WAAW,MAAMF,QAAOG,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAEH;QAClD,+BAA+B;QAC/B,IAAI,CAACG,QAAQ,GAAGA;IAClB;AAEF;;IApCGE,IAAAA,cAAK,EAAC,IAAMC;IACZC,IAAAA,eAAM;;GAHIf;;IAMVe,IAAAA,eAAM,EAAC;QAAEC,UAAU;IAAK;;GANdhB;;IASVa,IAAAA,cAAK,EAAC,IAAMC;IACZC,IAAAA,eAAM;;GAVIf;;IAaVa,IAAAA,cAAK,EAAC,IAAMC;IACZC,IAAAA,eAAM;;GAdIf;;IAiBVa,IAAAA,cAAK,EAAC,IAAMC,QAAQ;QAAEE,UAAU;IAAK;IACrCD,IAAAA,eAAM,EAAC;QAAEC,UAAU;IAAK;;GAlBdhB;;IAqBVa,IAAAA,cAAK,EAAC,IAAM;YAACI,gBAAI;SAAC,EAAE;QAAED,UAAU;IAAK;IACrCE,IAAAA,mBAAU,EAAC,IAAMD,gBAAI,EAAE,CAACE,OAASA,KAAKC,KAAK;;GAtBjCpB;;IAyBVa,IAAAA,cAAK,EAAC,IAAM;YAACQ,kBAAK;SAAC;IACnBC,IAAAA,kBAAS,EAAC,IAAMD,kBAAK,EAAE,CAACE,QAAUA,MAAMC,IAAI;;GA1BlCxB;;IA6BVyB,IAAAA,qBAAY;;;;GA7BFzB;AAAAA;IAFZ0B,IAAAA,mBAAU;IACVC,IAAAA,eAAM;GACM3B"}