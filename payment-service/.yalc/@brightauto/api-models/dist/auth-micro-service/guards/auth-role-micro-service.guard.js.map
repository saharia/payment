{"version":3,"sources":["../../../src/auth-micro-service/guards/auth-role-micro-service.guard.ts"],"sourcesContent":["import { ExecutionContext, ForbiddenException, Inject, Injectable } from '@nestjs/common';\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AuthRoleMicroServiceGuard  extends AuthGuard('jwtAuthRoleMicroService') {\n\n  @Inject('NAT_SERVICE')\n  protected readonly client: ClientProxy;\n  \n  /* async canActivate(context: ExecutionContext) {\n    const request = context.switchToRpc();\n    const user: User = request.getContext()['user'];\n    const userRoles = user.roles;\n    const action = request.getContext().getSubject();\n    console.log(\"checking roles ==>\", action);\n\n    const record = this.natService.bindMicroServiceHeader(request.getContext(), { name: action, roleId: '123' });\n    return await lastValueFrom(this.client.send('auth.findActionByRole', record));\n  } */\n\n  canActivate(context: ExecutionContext) {\n    // console.log(context.switchToRpc().getContext());\n    return super.canActivate(new ExecutionContextHost([context.switchToRpc().getContext()]));\n  }\n\n  handleRequest(err: any, user: any) {\n    console.log(\"checking roles -->\");\n    // console.log(\"validate role for the user\")\n    /* console.log(\"user ==>\", user);\n    console.log(\"error ==>\", err); */\n    if (err || !user) {\n      // throw err || new AuthenticationError('GqlAuthGuard');\n      throw err || new ForbiddenException()\n    }\n    return user;\n  }\n\n}\n"],"names":["AuthRoleMicroServiceGuard","AuthGuard","canActivate","context","ExecutionContextHost","switchToRpc","getContext","handleRequest","err","user","console","log","ForbiddenException","Inject","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAMaA;;;eAAAA;;;wBAN4D;sCACpC;+BACT;0BACF;;;;;;;;;;AAGnB,IAAA,AAAMA,4BAAN,MAAMA,kCAAmCC,IAAAA,mBAAS,EAAC;IAKxD;;;;;;;;;IASE,GAEFC,YAAYC,OAAyB,EAAE;QACrC,mDAAmD;QACnD,OAAO,KAAK,CAACD,YAAY,IAAIE,0CAAoB,CAAC;YAACD,QAAQE,WAAW,GAAGC,UAAU;SAAG;IACxF;IAEAC,cAAcC,GAAQ,EAAEC,IAAS,EAAE;QACjCC,QAAQC,GAAG,CAAC;QACZ,4CAA4C;QAC5C;mCAC+B,GAC/B,IAAIH,OAAO,CAACC,MAAM;YAChB,wDAAwD;YACxD,MAAMD,OAAO,IAAII,0BAAkB;QACrC;QACA,OAAOH;IACT;AAEF;;IA/BGI,IAAAA,cAAM,EAAC;uCACmB,0BAAW,4BAAX,0BAAW;GAH3Bb;AAAAA;IADZc,IAAAA,kBAAU;GACEd"}