{"version":3,"sources":["../../src/jwt/auth.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"../orm-config/entity\";\nimport { Repository } from \"typeorm\";\nimport * as bcrypt from 'bcrypt';\nimport { FindUserInput } from \"../graphql-config\";\n\n@Injectable()\nexport class JWTAuthService {\n\n  @InjectRepository(User)\n  private readonly user: Repository<User>;\n\n  async validateUser(email: string, pass: string): Promise<any> {\n    const user = await this.user.findOne({ where: { email }, relations: [ 'roles' ] });\n    if (user) {\n      const isMatch = await bcrypt.compare(pass, user.password);\n      if(isMatch) {\n        const { password, ...result } = user;\n        return result;\n      } else {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  async findOne(findUserInput: FindUserInput): Promise<User> {\n    try {\n      const query = {\n        where: {\n          id: findUserInput.id,\n        },\n        relations: [ \"roles\", \"roles.actions\" ]\n      };\n      return await this.user.findOneOrFail(query);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n}"],"names":["JWTAuthService","validateUser","email","pass","user","findOne","where","relations","isMatch","bcrypt","compare","password","result","findUserInput","query","id","findOneOrFail","error","InjectRepository","User","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAQaA;;;eAAAA;;;wBARc;yBACM;wBACZ;0BACM;gEACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIjB,IAAA,AAAMA,iBAAN,MAAMA;IAKX,MAAMC,aAAaC,KAAa,EAAEC,IAAY,EAAgB;QAC5D,MAAMC,OAAO,MAAM,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEJ;YAAM;YAAGK,WAAW;gBAAE;aAAS;QAAC;QAChF,IAAIH,MAAM;YACR,MAAMI,UAAU,MAAMC,QAAOC,OAAO,CAACP,MAAMC,KAAKO,QAAQ;YACxD,IAAGH,SAAS;gBACV,MAAM,EAAEG,QAAQ,EAAE,GAAGC,QAAQ,GAAGR;gBAChC,OAAOQ;YACT,OAAO;gBACL,OAAO;YACT;QACF;QACA,OAAO;IACT;IAEA,MAAMP,QAAQQ,aAA4B,EAAiB;QACzD,IAAI;YACF,MAAMC,QAAQ;gBACZR,OAAO;oBACLS,IAAIF,cAAcE,EAAE;gBACtB;gBACAR,WAAW;oBAAE;oBAAS;iBAAiB;YACzC;YACA,OAAO,MAAM,IAAI,CAACH,IAAI,CAACY,aAAa,CAACF;QACvC,EAAE,OAAOG,OAAO;YACd,MAAMA;QACR;IACF;AAEF;;IA/BGC,IAAAA,yBAAgB,EAACC,YAAI;uCACC,oBAAU,4BAAV,oBAAU;GAHtBnB;AAAAA;IADZoB,IAAAA,kBAAU;GACEpB"}