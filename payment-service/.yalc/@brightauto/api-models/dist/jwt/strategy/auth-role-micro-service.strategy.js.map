{"version":3,"sources":["../../../src/jwt/strategy/auth-role-micro-service.strategy.ts"],"sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { lastValueFrom } from 'rxjs';\nimport { NatService } from '../../nat-service';\n\n@Injectable()\nexport class JwtAuthRoleMicroServiceStrategy extends PassportStrategy(Strategy, 'jwtAuthRoleMicroService') {\n\n  @Inject('NAT_SERVICE')\n  protected readonly client: ClientProxy;\n  \n  constructor(\n    private natService: NatService,\n    private configService: ConfigService  \n  ) {\n    super({\n      passReqToCallback: true,\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req:any) => {\n          // console.log(\"User service strategy Req ==>\", req.getHeaders())\n          return req.getHeaders() && req.getHeaders().headers.get('authorization') ? req.getHeaders().headers.get('authorization')[0].replace('Bearer ', '') : null;\n        },\n      ]),\n      ignoreExpiration: true,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(context: any, payload: any) {\n    try {\n      const action = context.getSubject();\n      // console.log(\"check role guard inside strategy\", action, context.getSubject(), payload)\n      console.log('checking roles -->', context, payload);\n      const record = this.natService.bindMicroServiceHeader(context, { action, roleId: payload.roleId });\n      const roleAction = await lastValueFrom(this.client.send('auth.findActionByRole', record));\n      if(roleAction) {\n        return context.user;\n      }\n      return false;\n    } catch (error) {\n      throw error;\n    }\n  }\n}"],"names":["JwtAuthRoleMicroServiceStrategy","PassportStrategy","Strategy","validate","context","payload","action","getSubject","console","log","record","natService","bindMicroServiceHeader","roleId","roleAction","lastValueFrom","client","send","user","error","constructor","configService","passReqToCallback","jwtFromRequest","ExtractJwt","fromExtractors","req","getHeaders","headers","get","replace","ignoreExpiration","secretOrKey","Inject","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;wBATsB;wBACL;+BACF;0BACK;6BACI;sBACP;4BACH;;;;;;;;;;AAGpB,IAAA,AAAMA,kCAAN,MAAMA,wCAAwCC,IAAAA,0BAAgB,EAACC,qBAAQ,EAAE;IAsB9E,MAAMC,SAASC,OAAY,EAAEC,OAAY,EAAE;QACzC,IAAI;YACF,MAAMC,SAASF,QAAQG,UAAU;YACjC,yFAAyF;YACzFC,QAAQC,GAAG,CAAC,sBAAsBL,SAASC;YAC3C,MAAMK,SAAS,IAAI,CAACC,UAAU,CAACC,sBAAsB,CAACR,SAAS;gBAAEE;gBAAQO,QAAQR,QAAQQ,MAAM;YAAC;YAChG,MAAMC,aAAa,MAAMC,IAAAA,mBAAa,EAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,yBAAyBP;YACjF,IAAGI,YAAY;gBACb,OAAOV,QAAQc,IAAI;YACrB;YACA,OAAO;QACT,EAAE,OAAOC,OAAO;YACd,MAAMA;QACR;IACF;IA/BAC,YACE,AAAQT,UAAsB,EAC9B,AAAQU,aAA4B,CACpC;QACA,KAAK,CAAC;YACJC,mBAAmB;YACnBC,gBAAgBC,uBAAU,CAACC,cAAc,CAAC;gBACxC,CAACC;oBACC,iEAAiE;oBACjE,OAAOA,IAAIC,UAAU,MAAMD,IAAIC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,mBAAmBH,IAAIC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAACC,OAAO,CAAC,WAAW,MAAM;gBACvJ;aACD;YACDC,kBAAkB;YAClBC,aAAaX,cAAcQ,GAAG,CAAC;QACjC;aAbQlB,aAAAA;aACAU,gBAAAA;IAaV;AAiBF;;IAnCGY,IAAAA,cAAM,EAAC;uCACmB,0BAAW,4BAAX,0BAAW;GAH3BjC;AAAAA;IADZkC,IAAAA,kBAAU;;;eAOa,sBAAU,4BAAV,sBAAU;eACP,qBAAa,4BAAb,qBAAa;;GAP3BlC"}