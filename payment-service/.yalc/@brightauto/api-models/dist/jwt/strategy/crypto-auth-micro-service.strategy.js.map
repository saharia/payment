{"version":3,"sources":["../../../src/jwt/strategy/crypto-auth-micro-service.strategy.ts"],"sourcesContent":["import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { lastValueFrom } from 'rxjs';\nimport { NatService } from '../../nat-service';\nimport { Strategy } from 'passport-custom';\n\n@Injectable()\nexport class CryptoAuthMicroServiceStrategy extends PassportStrategy(Strategy, 'cryptoAuthMicroService') {\n\n  @Inject('NAT_SERVICE')\n  protected readonly client: ClientProxy;\n  \n  constructor(\n    private natService: NatService,\n    private configService: ConfigService  \n  ) {\n    super();\n  }\n\n  async validate(context: any) {\n    // console.log(\"JWT payload\", context.getSubject(), payload);\n    \n    const action = context.getSubject();\n    const apiKey = context.getHeaders().headers.get('authorization') ? context.getHeaders().headers.get('authorization')[0].replace('Bearer ', '') : null;\n    if(!apiKey) {\n      throw new UnauthorizedException();\n    }\n    // console.log(context.getHeaders().headers.get('authorization'));\n    console.log(\"action ---->\", action);\n    const record = this.natService.bindMicroServiceHeader(context, { apiKey });\n    const user = await lastValueFrom(this.client.send('auth.findUserByBrandApiKey', record));\n    // console.log(\"crypto user -->\", user);\n    if(!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}"],"names":["CryptoAuthMicroServiceStrategy","PassportStrategy","Strategy","validate","context","action","getSubject","apiKey","getHeaders","headers","get","replace","UnauthorizedException","console","log","record","natService","bindMicroServiceHeader","user","lastValueFrom","client","send","constructor","configService","Inject","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;wBAT6C;wBAC5B;+BACF;0BACK;sBACH;4BACH;gCACF;;;;;;;;;;AAGlB,IAAA,AAAMA,iCAAN,MAAMA,uCAAuCC,IAAAA,0BAAgB,EAACC,wBAAQ,EAAE;IAY7E,MAAMC,SAASC,OAAY,EAAE;QAC3B,6DAA6D;QAE7D,MAAMC,SAASD,QAAQE,UAAU;QACjC,MAAMC,SAASH,QAAQI,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,mBAAmBN,QAAQI,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAACC,OAAO,CAAC,WAAW,MAAM;QACjJ,IAAG,CAACJ,QAAQ;YACV,MAAM,IAAIK,6BAAqB;QACjC;QACA,kEAAkE;QAClEC,QAAQC,GAAG,CAAC,gBAAgBT;QAC5B,MAAMU,SAAS,IAAI,CAACC,UAAU,CAACC,sBAAsB,CAACb,SAAS;YAAEG;QAAO;QACxE,MAAMW,OAAO,MAAMC,IAAAA,mBAAa,EAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,8BAA8BN;QAChF,wCAAwC;QACxC,IAAG,CAACG,MAAM;YACR,MAAM,IAAIN,6BAAqB;QACjC;QACA,OAAOM;IACT;IAxBAI,YACE,AAAQN,UAAsB,EAC9B,AAAQO,aAA4B,CACpC;QACA,KAAK;aAHGP,aAAAA;aACAO,gBAAAA;IAGV;AAoBF;;IA5BGC,IAAAA,cAAM,EAAC;uCACmB,0BAAW,4BAAX,0BAAW;GAH3BxB;AAAAA;IADZyB,IAAAA,kBAAU;;;eAOa,sBAAU,4BAAV,sBAAU;eACP,qBAAa,4BAAb,qBAAa;;GAP3BzB"}