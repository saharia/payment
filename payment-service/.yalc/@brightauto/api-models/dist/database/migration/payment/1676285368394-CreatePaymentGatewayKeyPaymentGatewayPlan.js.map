{"version":3,"sources":["../../../../src/database/migration/payment/1676285368394-CreatePaymentGatewayKeyPaymentGatewayPlan.ts"],"sourcesContent":["import { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\nimport { paymentTableName } from '../../../common';\n\nexport class CreatePaymentGatewayKeyPaymentGatewayPlan1676285368394 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + paymentTableName.paymentGatewayKeyPaymentGatewayPlan;\n  paymentGatewayKeyTableName = this.tablePrefix + paymentTableName.paymentGatewayKey;\n  paymentGatewayPlanTableName = this.tablePrefix + paymentTableName.paymentGatewayPlan;\n\n  paymentGatewayKeyForeignKeyColumn = paymentTableName.paymentGatewayKey + '_id';\n  paymentGatewayPlanForeignKeyColumn = paymentTableName.paymentGatewayPlan + '_id';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"user table migration is running -->\", this.tableName);\n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          {\n            name: this.paymentGatewayKeyForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: this.paymentGatewayPlanForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n        ],\n      }),\n      true,\n    );\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n\n    const paymentGatewayKeyForeignKey = new TableForeignKey({\n        name: \"FK_payment_gateway_key_payment_gateway_plan_payment_gateway_key\",\n        columnNames: [this.paymentGatewayKeyForeignKeyColumn],\n        referencedColumnNames: [\"id\"],\n        referencedTableName: this.paymentGatewayKeyTableName,\n    });\n    const paymentPlanForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_key_payment_gateway_plan_payment_gateway_plan\",\n      columnNames: [this.paymentGatewayPlanForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentGatewayPlanTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      paymentGatewayKeyForeignKey,\n      paymentPlanForeignKey\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    const paymentGatewayKeyForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_key_payment_gateway_plan_payment_gateway_key\",\n      columnNames: [this.paymentGatewayKeyForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentGatewayKeyTableName,\n    });\n    const paymentPlanForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_key_payment_gateway_plan_payment_gateway_plan\",\n      columnNames: [this.paymentGatewayPlanForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentGatewayPlanTableName,\n    });\n    \n    await queryRunner.dropForeignKeys(this.tableName, [\n      paymentGatewayKeyForeignKey,\n      paymentPlanForeignKey\n    ]);\n    await queryRunner.dropTable(this.tableName);\n  }\n\n}\n"],"names":["CreatePaymentGatewayKeyPaymentGatewayPlan1676285368394","up","queryRunner","console","log","tableName","createTable","Table","name","columns","paymentGatewayKeyForeignKeyColumn","type","isNullable","paymentGatewayPlanForeignKeyColumn","clearSqlMemory","paymentGatewayKeyForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","paymentGatewayKeyTableName","paymentPlanForeignKey","paymentGatewayPlanTableName","createForeignKeys","down","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","paymentTableName","paymentGatewayKeyPaymentGatewayPlan","paymentGatewayKey","paymentGatewayPlan"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAGaA;;;eAAAA;;;yBAH2D;wBACvC;AAE1B,IAAA,AAAMA,yDAAN,MAAMA;IAUX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,uCAAuC,IAAI,CAACC,SAAS;QACjE,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;gBACP;oBACED,MAAM,IAAI,CAACE,iCAAiC;oBAC5CC,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM,IAAI,CAACK,kCAAkC;oBAC7CF,MAAM;oBACNC,YAAY;gBACd;aACD;QACH,IACA;QAGF,4EAA4E;QAC5EV,YAAYY,cAAc;QAE1B,MAAMC,8BAA8B,IAAIC,wBAAe,CAAC;YACpDR,MAAM;YACNS,aAAa;gBAAC,IAAI,CAACP,iCAAiC;aAAC;YACrDQ,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,0BAA0B;QACxD;QACA,MAAMC,wBAAwB,IAAIL,wBAAe,CAAC;YAChDR,MAAM;YACNS,aAAa;gBAAC,IAAI,CAACJ,kCAAkC;aAAC;YACtDK,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,2BAA2B;QACvD;QAEA,MAAMpB,YAAYqB,iBAAiB,CAAC,IAAI,CAAClB,SAAS,EAAE;YAClDU;YACAM;SACD;IACH;IAEA,MAAaG,KAAKtB,WAAwB,EAAiB;QACzD,MAAMa,8BAA8B,IAAIC,wBAAe,CAAC;YACtDR,MAAM;YACNS,aAAa;gBAAC,IAAI,CAACP,iCAAiC;aAAC;YACrDQ,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,0BAA0B;QACtD;QACA,MAAMC,wBAAwB,IAAIL,wBAAe,CAAC;YAChDR,MAAM;YACNS,aAAa;gBAAC,IAAI,CAACJ,kCAAkC;aAAC;YACtDK,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,2BAA2B;QACvD;QAEA,MAAMpB,YAAYuB,eAAe,CAAC,IAAI,CAACpB,SAAS,EAAE;YAChDU;YACAM;SACD;QACD,MAAMnB,YAAYwB,SAAS,CAAC,IAAI,CAACrB,SAAS;IAC5C;;aAtEAsB,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrEzB,YAAY,IAAI,CAACsB,WAAW,GAAGI,wBAAgB,CAACC,mCAAmC;aACnFZ,6BAA6B,IAAI,CAACO,WAAW,GAAGI,wBAAgB,CAACE,iBAAiB;aAClFX,8BAA8B,IAAI,CAACK,WAAW,GAAGI,wBAAgB,CAACG,kBAAkB;aAEpFxB,oCAAoCqB,wBAAgB,CAACE,iBAAiB,GAAG;aACzEpB,qCAAqCkB,wBAAgB,CAACG,kBAAkB,GAAG;;AAkE7E"}