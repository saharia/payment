{"version":3,"sources":["../../../../src/validation/validate-if/payment/payment-validate-if.rule.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\nimport { PaymentType } from \"../../../orm-config/entity/enum/payment-type\";\nimport { DataSource } from \"typeorm\";\nimport { PaymentGatewayKey } from \"../../../orm-config\";\n\n\n@ValidatorConstraint({ name: 'PaymentValidateIfRule', async: true })\n@Injectable()\nexport class PaymentValidateIfRule implements ValidatorConstraintInterface {\n  constructor(private dataSource: DataSource) {}\n\n  async validate(value: any, args: ValidationArguments) {\n    try {\n      const [gatewayName, type] = args.constraints;\n      const input = (args.object as any);\n      // console.log(gatewayName);\n      const paymentGatewayId = input['paymentGatewayId'];\n      const primaryBrandId = input['primaryBrandId'];\n      const paymentGatewayKey = await this.dataSource.getRepository(PaymentGatewayKey).findOne({ where: { brand: { id: primaryBrandId }, paymentGateway: { id: paymentGatewayId } }\n        , relations: [ \"paymentGateway\" ] });\n      if(input['paymentType'] == PaymentType.SUBSCRIBE) {\n        // console.log(gatewayName, input, args.property, paymentGatewayKey.paymentGateway.name)\n        if(paymentGatewayKey && !input[args.property] && paymentGatewayKey.paymentGateway.name.toLowerCase() == gatewayName) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    } catch (e) {\n      console.log(e)\n      return false;\n    }\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `${args.property} is required!`;\n  }\n}"],"names":["PaymentValidateIfRule","validate","value","args","gatewayName","type","constraints","input","object","paymentGatewayId","primaryBrandId","paymentGatewayKey","dataSource","getRepository","PaymentGatewayKey","findOne","where","brand","id","paymentGateway","relations","PaymentType","SUBSCRIBE","property","name","toLowerCase","e","console","log","defaultMessage","constructor","ValidatorConstraint","async","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;wBATc;gCAC4D;6BAC3D;yBACD;2BACO;;;;;;;;;;AAK3B,IAAA,AAAMA,wBAAN,MAAMA;IAGX,MAAMC,SAASC,KAAU,EAAEC,IAAyB,EAAE;QACpD,IAAI;YACF,MAAM,CAACC,aAAaC,KAAK,GAAGF,KAAKG,WAAW;YAC5C,MAAMC,QAASJ,KAAKK,MAAM;YAC1B,4BAA4B;YAC5B,MAAMC,mBAAmBF,KAAK,CAAC,mBAAmB;YAClD,MAAMG,iBAAiBH,KAAK,CAAC,iBAAiB;YAC9C,MAAMI,oBAAoB,MAAM,IAAI,CAACC,UAAU,CAACC,aAAa,CAACC,4BAAiB,EAAEC,OAAO,CAAC;gBAAEC,OAAO;oBAAEC,OAAO;wBAAEC,IAAIR;oBAAe;oBAAGS,gBAAgB;wBAAED,IAAIT;oBAAiB;gBAAE;gBACxKW,WAAW;oBAAE;iBAAkB;YAAC;YACpC,IAAGb,KAAK,CAAC,cAAc,IAAIc,wBAAW,CAACC,SAAS,EAAE;gBAChD,wFAAwF;gBACxF,IAAGX,qBAAqB,CAACJ,KAAK,CAACJ,KAAKoB,QAAQ,CAAC,IAAIZ,kBAAkBQ,cAAc,CAACK,IAAI,CAACC,WAAW,MAAMrB,aAAa;oBACnH,OAAO;gBACT,OAAO;oBACL,OAAO;gBACT;YACF,OAAO;gBACL,OAAO;YACT;QACF,EAAE,OAAOsB,GAAG;YACVC,QAAQC,GAAG,CAACF;YACZ,OAAO;QACT;IACF;IAEAG,eAAe1B,IAAyB,EAAE;QACxC,OAAO,CAAC,EAAEA,KAAKoB,QAAQ,CAAC,aAAa,CAAC;IACxC;IA7BAO,YAAY,AAAQlB,UAAsB,CAAE;aAAxBA,aAAAA;IAAyB;AA8B/C;AA/BaZ;IAFZ+B,IAAAA,mCAAmB,EAAC;QAAEP,MAAM;QAAyBQ,OAAO;IAAK;IACjEC,IAAAA,kBAAU;;;eAEuB,mBAAU,4BAAV,mBAAU;;GAD/BjC"}