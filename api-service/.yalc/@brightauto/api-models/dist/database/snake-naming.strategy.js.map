{"version":3,"sources":["../../src/database/snake-naming.strategy.ts"],"sourcesContent":["import { DefaultNamingStrategy, NamingStrategyInterface } from 'typeorm';\nimport { snakeCase } from 'typeorm/util/StringUtils';\n\nexport class SnakeNamingStrategy\n  extends DefaultNamingStrategy\n  implements NamingStrategyInterface {\n  tableName(className: string, customName: string): string {\n    return customName ? customName : snakeCase(className);\n  }\n\n  columnName(\n    propertyName: string,\n    customName: string,\n    embeddedPrefixes: string[],\n  ): string {\n    return (\n      snakeCase(embeddedPrefixes.concat('').join('_')) +\n      (customName ? customName : snakeCase(propertyName))\n    );\n  }\n\n  relationName(propertyName: string): string {\n    return snakeCase(propertyName);\n  }\n\n  joinColumnName(relationName: string, referencedColumnName: string): string {\n    return snakeCase(relationName + '_' + referencedColumnName);\n  }\n\n  joinTableName(\n    firstTableName: string,\n    secondTableName: string,\n    firstPropertyName: string,\n    secondPropertyName: string,\n  ): string {\n    return snakeCase(\n      firstTableName +\n        '_' +\n        firstPropertyName.replace(/\\./gi, '_') +\n        '_' +\n        secondTableName,\n    );\n  }\n\n  joinTableColumnName(\n    tableName: string,\n    propertyName: string,\n    columnName?: string,\n  ): string {\n    return snakeCase(\n      tableName + '_' + (columnName ? columnName : propertyName),\n    );\n  }\n\n  classTableInheritanceParentColumnName(\n    parentTableName: any,\n    parentTableIdPropertyName: any,\n  ): string {\n    return snakeCase(parentTableName + '_' + parentTableIdPropertyName);\n  }\n\n  eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n    return alias + '__' + propertyPath.replace('.', '_');\n  }\n}"],"names":["SnakeNamingStrategy","DefaultNamingStrategy","tableName","className","customName","snakeCase","columnName","propertyName","embeddedPrefixes","concat","join","relationName","joinColumnName","referencedColumnName","joinTableName","firstTableName","secondTableName","firstPropertyName","secondPropertyName","replace","joinTableColumnName","classTableInheritanceParentColumnName","parentTableName","parentTableIdPropertyName","eagerJoinRelationAlias","alias","propertyPath"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAGaA;;;eAAAA;;;yBAHkD;6BACrC;AAEnB,IAAA,AAAMA,sBAAN,MAAMA,4BACHC,8BAAqB;IAE7BC,UAAUC,SAAiB,EAAEC,UAAkB,EAAU;QACvD,OAAOA,aAAaA,aAAaC,IAAAA,sBAAS,EAACF;IAC7C;IAEAG,WACEC,YAAoB,EACpBH,UAAkB,EAClBI,gBAA0B,EAClB;QACR,OACEH,IAAAA,sBAAS,EAACG,iBAAiBC,MAAM,CAAC,IAAIC,IAAI,CAAC,QAC1CN,CAAAA,aAAaA,aAAaC,IAAAA,sBAAS,EAACE,aAAY;IAErD;IAEAI,aAAaJ,YAAoB,EAAU;QACzC,OAAOF,IAAAA,sBAAS,EAACE;IACnB;IAEAK,eAAeD,YAAoB,EAAEE,oBAA4B,EAAU;QACzE,OAAOR,IAAAA,sBAAS,EAACM,eAAe,MAAME;IACxC;IAEAC,cACEC,cAAsB,EACtBC,eAAuB,EACvBC,iBAAyB,EACzBC,kBAA0B,EAClB;QACR,OAAOb,IAAAA,sBAAS,EACdU,iBACE,MACAE,kBAAkBE,OAAO,CAAC,QAAQ,OAClC,MACAH;IAEN;IAEAI,oBACElB,SAAiB,EACjBK,YAAoB,EACpBD,UAAmB,EACX;QACR,OAAOD,IAAAA,sBAAS,EACdH,YAAY,MAAOI,CAAAA,aAAaA,aAAaC,YAAW;IAE5D;IAEAc,sCACEC,eAAoB,EACpBC,yBAA8B,EACtB;QACR,OAAOlB,IAAAA,sBAAS,EAACiB,kBAAkB,MAAMC;IAC3C;IAEAC,uBAAuBC,KAAa,EAAEC,YAAoB,EAAU;QAClE,OAAOD,QAAQ,OAAOC,aAAaP,OAAO,CAAC,KAAK;IAClD;AACF"}