{"version":3,"sources":["../../../../src/database/migration/authentication/1676286523959-CreateRoleAction.ts"],"sourcesContent":["import { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\nimport { authenticationTableName } from \"../../../common\";\n\nexport class CreateRoleAction1676286523959 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + authenticationTableName.roleAction;\n  roleTableName = this.tablePrefix + authenticationTableName.role;\n  actionTableName = this.tablePrefix + authenticationTableName.action;\n\n  roleForeignKeyColumn = authenticationTableName.role + '_id';\n  actionForeignKeyColumn = authenticationTableName.action + '_id';\n  \n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"role_actions table migration is running -->\", this.tableName);\n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          {\n            name: this.roleForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: this.actionForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n        ],\n      }),\n      true,\n    );\n    const table = await queryRunner.getTable(this.tableName);\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_role_actions_action_id\",\n      columnNames: [this.actionForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.actionTableName,\n    });\n    const roleForeignKey = new TableForeignKey({\n      name: \"FK_role_actions_role_id\",\n      columnNames: [this.roleForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.roleTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      userForeignKey,\n      roleForeignKey\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"role_actions table down migration is running -->\");\n    const table = await queryRunner.getTable(this.tableName);\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_role_action_action_id\",\n      columnNames: [this.actionForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.actionTableName,\n    });\n    const roleForeignKey = new TableForeignKey({\n      name: \"FK_role_action_role_id\",\n      columnNames: [this.roleForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.roleTableName,\n    });\n    await queryRunner.dropForeignKeys(table, [userForeignKey, roleForeignKey]);\n    await queryRunner.dropTable(this.tableName);\n  }\n\n}\n"],"names":["CreateRoleAction1676286523959","up","queryRunner","console","log","tableName","createTable","Table","name","columns","roleForeignKeyColumn","type","isNullable","actionForeignKeyColumn","table","getTable","clearSqlMemory","userForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","actionTableName","roleForeignKey","roleTableName","createForeignKeys","down","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","authenticationTableName","roleAction","role","action"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAGaA;;;eAAAA;;;yBAH2D;wBAChC;AAEjC,IAAA,AAAMA,gCAAN,MAAMA;IAUX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,+CAA+C,IAAI,CAACC,SAAS;QACzE,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;gBACP;oBACED,MAAM,IAAI,CAACE,oBAAoB;oBAC/BC,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM,IAAI,CAACK,sBAAsB;oBACjCF,MAAM;oBACNC,YAAY;gBACd;aACD;QACH,IACA;QAEF,MAAME,QAAQ,MAAMZ,YAAYa,QAAQ,CAAC,IAAI,CAACV,SAAS;QAEvD,4EAA4E;QAC5EH,YAAYc,cAAc;QAE1B,MAAMC,iBAAiB,IAAIC,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACN,sBAAsB;aAAC;YAC1CO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,eAAe;QAC3C;QACA,MAAMC,iBAAiB,IAAIL,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACT,oBAAoB;aAAC;YACxCU,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,aAAa;QACzC;QAEA,MAAMtB,YAAYuB,iBAAiB,CAAC,IAAI,CAACpB,SAAS,EAAE;YAClDY;YACAM;SACD;IACH;IAEA,MAAaG,KAAKxB,WAAwB,EAAiB;QACzDC,QAAQC,GAAG,CAAC;QACZ,MAAMU,QAAQ,MAAMZ,YAAYa,QAAQ,CAAC,IAAI,CAACV,SAAS;QACvD,MAAMY,iBAAiB,IAAIC,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACN,sBAAsB;aAAC;YAC1CO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,eAAe;QAC3C;QACA,MAAMC,iBAAiB,IAAIL,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACT,oBAAoB;aAAC;YACxCU,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,aAAa;QACzC;QACA,MAAMtB,YAAYyB,eAAe,CAACb,OAAO;YAACG;YAAgBM;SAAe;QACzE,MAAMrB,YAAY0B,SAAS,CAAC,IAAI,CAACvB,SAAS;IAC5C;;aArEAwB,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrE3B,YAAY,IAAI,CAACwB,WAAW,GAAGI,+BAAuB,CAACC,UAAU;aACjEV,gBAAgB,IAAI,CAACK,WAAW,GAAGI,+BAAuB,CAACE,IAAI;aAC/Db,kBAAkB,IAAI,CAACO,WAAW,GAAGI,+BAAuB,CAACG,MAAM;aAEnE1B,uBAAuBuB,+BAAuB,CAACE,IAAI,GAAG;aACtDtB,yBAAyBoB,+BAAuB,CAACG,MAAM,GAAG;;AAiE5D"}