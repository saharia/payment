{"version":3,"sources":["../../src/nat-service/nat.service.ts"],"sourcesContent":["import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ClientProxy, NatsRecordBuilder } from \"@nestjs/microservices\";\nimport * as nats from 'nats';\nimport { timeout } from \"rxjs\";\n\n@Injectable()\nexport class NatService {\n\n  @Inject('NAT_SERVICE')\n  protected readonly client: ClientProxy;\n\n  constructor(private configService: ConfigService) {}\n  \n  bindGraphqlHeader(context: any, data: any) {\n    const authorization = context.req.headers.authorization;\n    const headers = nats.headers();\n    // console.log(authorization);\n    if(authorization) {\n      headers.set('authorization', authorization);\n    }\n    return new NatsRecordBuilder({ data }).setHeaders(headers).build();\n  }\n\n  bindData(context: any, data: any) {\n    const authorization = context.req.headers.authorization;\n    const headers = nats.headers();\n    // console.log(authorization);\n    if(authorization) {\n      headers.set('authorization', authorization);\n    }\n    return new NatsRecordBuilder({ data }).setHeaders(headers).build();\n  }\n\n  bindMicroServiceHeader(context: any, data: any) {\n    const authorization = context.getHeaders().headers.get('authorization')[0];\n    const headers = nats.headers();\n    if(authorization) {\n      headers.set('authorization', authorization);\n    }\n    return new NatsRecordBuilder({ data }).setHeaders(headers).build();\n  }\n\n  async send(context, action, data: any, headerType?: string): Promise<any> {\n    let record;\n    switch (headerType) {\n      /* If this function call from inside microservice */\n      case 'microservice':\n        record = this.bindMicroServiceHeader(context, data);\n        break;\n    \n      /* If this function call from graphql resolver */\n      case 'graphQl':\n        record = this.bindGraphqlHeader(context, data);\n        break;\n\n      default:\n        record = data;\n        break;\n    }\n    const serviceTimeout = this.configService.get('MICROSERVICE_TIMEOUT');\n    return this.client.send(action, record);\n  }\n\n}"],"names":["NatService","bindGraphqlHeader","context","data","authorization","req","headers","nats","set","NatsRecordBuilder","setHeaders","build","bindData","bindMicroServiceHeader","getHeaders","get","send","action","headerType","record","serviceTimeout","configService","client","constructor","Inject","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAOaA;;;eAAAA;;;wBAPsB;wBACL;+BACiB;8DACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIf,IAAA,AAAMA,aAAN,MAAMA;IAOXC,kBAAkBC,OAAY,EAAEC,IAAS,EAAE;QACzC,MAAMC,gBAAgBF,QAAQG,GAAG,CAACC,OAAO,CAACF,aAAa;QACvD,MAAME,UAAUC,MAAKD,OAAO;QAC5B,8BAA8B;QAC9B,IAAGF,eAAe;YAChBE,QAAQE,GAAG,CAAC,iBAAiBJ;QAC/B;QACA,OAAO,IAAIK,gCAAiB,CAAC;YAAEN;QAAK,GAAGO,UAAU,CAACJ,SAASK,KAAK;IAClE;IAEAC,SAASV,OAAY,EAAEC,IAAS,EAAE;QAChC,MAAMC,gBAAgBF,QAAQG,GAAG,CAACC,OAAO,CAACF,aAAa;QACvD,MAAME,UAAUC,MAAKD,OAAO;QAC5B,8BAA8B;QAC9B,IAAGF,eAAe;YAChBE,QAAQE,GAAG,CAAC,iBAAiBJ;QAC/B;QACA,OAAO,IAAIK,gCAAiB,CAAC;YAAEN;QAAK,GAAGO,UAAU,CAACJ,SAASK,KAAK;IAClE;IAEAE,uBAAuBX,OAAY,EAAEC,IAAS,EAAE;QAC9C,MAAMC,gBAAgBF,QAAQY,UAAU,GAAGR,OAAO,CAACS,GAAG,CAAC,gBAAgB,CAAC,EAAE;QAC1E,MAAMT,UAAUC,MAAKD,OAAO;QAC5B,IAAGF,eAAe;YAChBE,QAAQE,GAAG,CAAC,iBAAiBJ;QAC/B;QACA,OAAO,IAAIK,gCAAiB,CAAC;YAAEN;QAAK,GAAGO,UAAU,CAACJ,SAASK,KAAK;IAClE;IAEA,MAAMK,KAAKd,OAAO,EAAEe,MAAM,EAAEd,IAAS,EAAEe,UAAmB,EAAgB;QACxE,IAAIC;QACJ,OAAQD;YACN,kDAAkD,GAClD,KAAK;gBACHC,SAAS,IAAI,CAACN,sBAAsB,CAACX,SAASC;gBAC9C;YAEF,+CAA+C,GAC/C,KAAK;gBACHgB,SAAS,IAAI,CAAClB,iBAAiB,CAACC,SAASC;gBACzC;YAEF;gBACEgB,SAAShB;gBACT;QACJ;QACA,MAAMiB,iBAAiB,IAAI,CAACC,aAAa,CAACN,GAAG,CAAC;QAC9C,OAAO,IAAI,CAACO,MAAM,CAACN,IAAI,CAACC,QAAQE;IAClC;IAlDAI,YAAY,AAAQF,aAA4B,CAAE;aAA9BA,gBAAAA;IAA+B;AAoDrD;;IAvDGG,IAAAA,cAAM,EAAC;uCACmB,0BAAW,4BAAX,0BAAW;GAH3BxB;AAAAA;IADZyB,IAAAA,kBAAU;;;eAM0B,qBAAa,4BAAb,qBAAa;;GALrCzB"}