{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CommonModule } from './common/common.module';\nimport { ConfigurationModule } from './configuration';\nimport { SnakeNamingStrategy } from './database';\nimport { DatabaseModule } from './database/database.module';\nimport { GraphqlConfigModule } from './graphql-config/graphql-config.module';\nimport { OrmConfigModule } from './orm-config/orm-config.module';\nimport { ValidationModule } from './validation/validation.module';\n\n@Module({\n  imports: [\n    CommonModule, \n    ValidationModule, \n    DatabaseModule, \n    GraphqlConfigModule, \n    OrmConfigModule,\n    ConfigurationModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigurationModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        entityPrefix: configService.get('TABLE_PREFIX'),\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [\n          __dirname + '/orm-config/entity/**/*.{ts,js}'\n        ],\n        namingStrategy: new SnakeNamingStrategy(),\n        migrations: [\n          __dirname + '/database/migration/**/*.{ts,js}'\n        ],\n        migrationsTableName: configService.get('TABLE_PREFIX') + configService.get('MIGRATIONS_TABLE_NAME'),\n        migrationsRun: false,\n        synchronize: false\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [\n    CommonModule, \n    ValidationModule, \n    DatabaseModule, \n    GraphqlConfigModule, \n    OrmConfigModule,\n    ConfigurationModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"],"names":["AppModule","Module","imports","CommonModule","ValidationModule","DatabaseModule","GraphqlConfigModule","OrmConfigModule","ConfigurationModule","TypeOrmModule","forRootAsync","useFactory","configService","type","entityPrefix","get","host","port","username","password","database","entities","__dirname","namingStrategy","SnakeNamingStrategy","migrations","migrationsTableName","migrationsRun","synchronize","inject","ConfigService","exports","controllers","AppController","providers","AppService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAwDaA;;;eAAAA;;;wBAxDU;wBACO;yBACA;+BACA;4BACH;8BACE;+BACO;0BACA;gCACL;qCACK;iCACJ;kCACC;;;;;;;AA6C1B,IAAA,AAAMA,YAAN,MAAMA;AAAW;AAAXA;IA3CZC,IAAAA,cAAM,EAAC;QACNC,SAAS;YACPC,0BAAY;YACZC,kCAAgB;YAChBC,8BAAc;YACdC,wCAAmB;YACnBC,gCAAe;YACfC,kCAAmB;YACnBC,sBAAa,CAACC,YAAY,CAAC;gBACzBR,SAAS;oBAACM,kCAAmB;iBAAC;gBAC9BG,YAAY,CAACC,gBAAkC,CAAA;wBAC7CC,MAAM;wBACNC,cAAcF,cAAcG,GAAG,CAAC;wBAChCC,MAAMJ,cAAcG,GAAG,CAAC;wBACxBE,MAAML,cAAcG,GAAG,CAAC;wBACxBG,UAAUN,cAAcG,GAAG,CAAC;wBAC5BI,UAAUP,cAAcG,GAAG,CAAC;wBAC5BK,UAAUR,cAAcG,GAAG,CAAC;wBAC5BM,UAAU;4BACRC,YAAY;yBACb;wBACDC,gBAAgB,IAAIC,6BAAmB;wBACvCC,YAAY;4BACVH,YAAY;yBACb;wBACDI,qBAAqBd,cAAcG,GAAG,CAAC,kBAAkBH,cAAcG,GAAG,CAAC;wBAC3EY,eAAe;wBACfC,aAAa;oBACf,CAAA;gBACAC,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;SACD;QACDC,SAAS;YACP5B,0BAAY;YACZC,kCAAgB;YAChBC,8BAAc;YACdC,wCAAmB;YACnBC,gCAAe;YACfC,kCAAmB;SACpB;QACDwB,aAAa;YAACC,4BAAa;SAAC;QAC5BC,WAAW;YAACC,sBAAU;SAAC;IACzB;GACanC"}