{"version":3,"sources":["../../../src/jwt/strategy/auth-micro-service.strategy.ts"],"sourcesContent":["import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { lastValueFrom } from 'rxjs';\nimport { NatService } from '../../nat-service';\n\n@Injectable()\nexport class JwtAuthMicroServiceStrategy extends PassportStrategy(Strategy, 'jwtAuthMicroService') {\n\n  @Inject('NAT_SERVICE')\n  protected readonly client: ClientProxy;\n  \n  constructor(\n    private natService: NatService,\n    private configService: ConfigService  \n  ) {\n    super({\n      passReqToCallback: true,\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req:any) => {\n          // console.log(\"User service strategy Req ==>\", req.getHeaders())\n          return req.getHeaders() && req.getHeaders().headers.get('authorization') ? req.getHeaders().headers.get('authorization')[0].replace('Bearer ', '') : null;\n        },\n      ]),\n      ignoreExpiration: true,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(context: any, payload: any) {\n    // console.log(\"JWT payload\", context.getSubject(), payload);\n    const id = payload.sub;\n    \n    const action = context.getSubject();\n    console.log(\"action ---->\", action);\n    const record = this.natService.bindMicroServiceHeader(context, { id, roleId: payload.roleId });\n    const user = await lastValueFrom(this.client.send('auth.findUser', record));\n    if(!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}"],"names":["JwtAuthMicroServiceStrategy","PassportStrategy","Strategy","validate","context","payload","id","sub","action","getSubject","console","log","record","natService","bindMicroServiceHeader","roleId","user","lastValueFrom","client","send","UnauthorizedException","constructor","configService","passReqToCallback","jwtFromRequest","ExtractJwt","fromExtractors","req","getHeaders","headers","get","replace","ignoreExpiration","secretOrKey","Inject","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;wBAT6C;wBAC5B;+BACF;0BACK;6BACI;sBACP;4BACH;;;;;;;;;;AAGpB,IAAA,AAAMA,8BAAN,MAAMA,oCAAoCC,IAAAA,0BAAgB,EAACC,qBAAQ,EAAE;IAsB1E,MAAMC,SAASC,OAAY,EAAEC,OAAY,EAAE;QACzC,6DAA6D;QAC7D,MAAMC,KAAKD,QAAQE,GAAG;QAEtB,MAAMC,SAASJ,QAAQK,UAAU;QACjCC,QAAQC,GAAG,CAAC,gBAAgBH;QAC5B,MAAMI,SAAS,IAAI,CAACC,UAAU,CAACC,sBAAsB,CAACV,SAAS;YAAEE;YAAIS,QAAQV,QAAQU,MAAM;QAAC;QAC5F,MAAMC,OAAO,MAAMC,IAAAA,mBAAa,EAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,iBAAiBP;QACnE,IAAG,CAACI,MAAM;YACR,MAAM,IAAII,6BAAqB;QACjC;QACA,OAAOJ;IACT;IA7BAK,YACE,AAAQR,UAAsB,EAC9B,AAAQS,aAA4B,CACpC;QACA,KAAK,CAAC;YACJC,mBAAmB;YACnBC,gBAAgBC,uBAAU,CAACC,cAAc,CAAC;gBACxC,CAACC;oBACC,iEAAiE;oBACjE,OAAOA,IAAIC,UAAU,MAAMD,IAAIC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,mBAAmBH,IAAIC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAACC,OAAO,CAAC,WAAW,MAAM;gBACvJ;aACD;YACDC,kBAAkB;YAClBC,aAAaX,cAAcQ,GAAG,CAAC;QACjC;aAbQjB,aAAAA;aACAS,gBAAAA;IAaV;AAeF;;IAjCGY,IAAAA,cAAM,EAAC;uCACmB,0BAAW,4BAAX,0BAAW;GAH3BlC;AAAAA;IADZmC,IAAAA,kBAAU;;;eAOa,sBAAU,4BAAV,sBAAU;eACP,qBAAa,4BAAb,qBAAa;;GAP3BnC"}