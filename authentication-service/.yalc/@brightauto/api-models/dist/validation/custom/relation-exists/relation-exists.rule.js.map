{"version":3,"sources":["../../../../src/validation/custom/relation-exists/relation-exists.rule.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\nimport { difference, map } from \"lodash\";\nimport { DataSource, In } from \"typeorm\";\n\n@ValidatorConstraint({ name: 'RelationExists', async: true })\n@Injectable()\nexport class RelationExistsRule implements ValidatorConstraintInterface {\n  constructor(private dataSource: DataSource) {}\n\n  async validate(value: any, args: ValidationArguments) {\n    try {\n      const [model] = args.constraints;\n      const input = (args.object as any);\n      const id: string = input['id'];\n      console.log(Array.isArray(value));\n      if(Array.isArray(value)) {\n        let query = { id: In(value) };\n        let modelData = await this.dataSource.getRepository(model).find({ where: query });\n        if(modelData.length == value.length) {\n          return true;\n        } else {\n          if(modelData.length) {\n            const modelIds = map(modelData, 'id');\n            const missedIds = difference(value, modelIds);\n            // console.log(modelIds, missedIds);\n            args.constraints[1] = missedIds.join(\", \");\n          } else {\n            args.constraints[1] = value.join(\", \");\n          }\n          return false;\n        }\n      } else {\n        let query = { id: value };\n        await this.dataSource.getRepository(model).findOneByOrFail(query);\n      }\n    } catch (e) {\n      // console.log(e)\n      return false;\n    }\n\n    return true;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    // console.log('relation constraint array -->', args.constraints[1]);\n    if(args.constraints[1]) {\n      return `${args.constraints[1]} not found!`;\n    } else {\n      return `${args.property} not found!`;\n    }\n  }\n}"],"names":["RelationExistsRule","validate","value","args","model","constraints","input","object","id","console","log","Array","isArray","query","In","modelData","dataSource","getRepository","find","where","length","modelIds","map","missedIds","difference","join","findOneByOrFail","e","defaultMessage","property","constructor","ValidatorConstraint","name","async","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAOaA;;;eAAAA;;;wBAPc;gCAC4D;wBACvD;yBACD;;;;;;;;;;AAIxB,IAAA,AAAMA,qBAAN,MAAMA;IAGX,MAAMC,SAASC,KAAU,EAAEC,IAAyB,EAAE;QACpD,IAAI;YACF,MAAM,CAACC,MAAM,GAAGD,KAAKE,WAAW;YAChC,MAAMC,QAASH,KAAKI,MAAM;YAC1B,MAAMC,KAAaF,KAAK,CAAC,KAAK;YAC9BG,QAAQC,GAAG,CAACC,MAAMC,OAAO,CAACV;YAC1B,IAAGS,MAAMC,OAAO,CAACV,QAAQ;gBACvB,IAAIW,QAAQ;oBAAEL,IAAIM,IAAAA,WAAE,EAACZ;gBAAO;gBAC5B,IAAIa,YAAY,MAAM,IAAI,CAACC,UAAU,CAACC,aAAa,CAACb,OAAOc,IAAI,CAAC;oBAAEC,OAAON;gBAAM;gBAC/E,IAAGE,UAAUK,MAAM,IAAIlB,MAAMkB,MAAM,EAAE;oBACnC,OAAO;gBACT,OAAO;oBACL,IAAGL,UAAUK,MAAM,EAAE;wBACnB,MAAMC,WAAWC,IAAAA,WAAG,EAACP,WAAW;wBAChC,MAAMQ,YAAYC,IAAAA,kBAAU,EAACtB,OAAOmB;wBACpC,oCAAoC;wBACpClB,KAAKE,WAAW,CAAC,EAAE,GAAGkB,UAAUE,IAAI,CAAC;oBACvC,OAAO;wBACLtB,KAAKE,WAAW,CAAC,EAAE,GAAGH,MAAMuB,IAAI,CAAC;oBACnC;oBACA,OAAO;gBACT;YACF,OAAO;gBACL,IAAIZ,QAAQ;oBAAEL,IAAIN;gBAAM;gBACxB,MAAM,IAAI,CAACc,UAAU,CAACC,aAAa,CAACb,OAAOsB,eAAe,CAACb;YAC7D;QACF,EAAE,OAAOc,GAAG;YACV,iBAAiB;YACjB,OAAO;QACT;QAEA,OAAO;IACT;IAEAC,eAAezB,IAAyB,EAAE;QACxC,qEAAqE;QACrE,IAAGA,KAAKE,WAAW,CAAC,EAAE,EAAE;YACtB,OAAO,CAAC,EAAEF,KAAKE,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC;QAC5C,OAAO;YACL,OAAO,CAAC,EAAEF,KAAK0B,QAAQ,CAAC,WAAW,CAAC;QACtC;IACF;IA3CAC,YAAY,AAAQd,UAAsB,CAAE;aAAxBA,aAAAA;IAAyB;AA4C/C;AA7CahB;IAFZ+B,IAAAA,mCAAmB,EAAC;QAAEC,MAAM;QAAkBC,OAAO;IAAK;IAC1DC,IAAAA,kBAAU;;;eAEuB,mBAAU,4BAAV,mBAAU;;GAD/BlC"}