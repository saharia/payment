{"version":3,"sources":["../../../../src/validation/validate-if/widget/widget-validate-if.rule.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from \"class-validator\";\nimport { map } from \"lodash\";\nimport { PaymentType } from \"../../../orm-config/entity/enum/payment-type\";\nimport { PaymentGateway } from \"../../../orm-config/entity/payment/payment-gateway.entity\";\nimport { DataSource, In } from \"typeorm\";\n\n@ValidatorConstraint({ name: 'WidgetValidateIfRule', async: true })\n@Injectable()\nexport class WidgetValidateIfRule implements ValidatorConstraintInterface {\n  constructor(private dataSource: DataSource) {}\n\n  async validate(value: any, args: ValidationArguments) {\n    try {\n      const [gatewayName] = args.constraints;\n      const input = (args.object as any);\n      // console.log(gatewayName);\n      const paymentGatewayIds = input['paymentGatewayIds'];\n      const paymentGateways = await this.dataSource.getRepository(PaymentGateway).find({ where: { id: In(paymentGatewayIds) } });\n      if(input['paymentType'] == PaymentType.SUBSCRIBE && paymentGateways.length && !input[args.property]) {\n        const gatewayNames = map(paymentGateways, (val) =>  val.name.toLowerCase());\n        // console.log(gatewayNames);\n        return gatewayNames.indexOf(gatewayName) <= -1;\n      } else {\n        return true;\n      }\n    } catch (e) {\n      // console.log(e)\n      return true;\n    }\n\n    return true;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `${args.property} is required!`;\n  }\n}"],"names":["WidgetValidateIfRule","validate","value","args","gatewayName","constraints","input","object","paymentGatewayIds","paymentGateways","dataSource","getRepository","PaymentGateway","find","where","id","In","PaymentType","SUBSCRIBE","length","property","gatewayNames","map","val","name","toLowerCase","indexOf","e","defaultMessage","constructor","ValidatorConstraint","async","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;wBATc;gCAC4D;wBACnE;6BACQ;sCACG;yBACA;;;;;;;;;;AAIxB,IAAA,AAAMA,uBAAN,MAAMA;IAGX,MAAMC,SAASC,KAAU,EAAEC,IAAyB,EAAE;QACpD,IAAI;YACF,MAAM,CAACC,YAAY,GAAGD,KAAKE,WAAW;YACtC,MAAMC,QAASH,KAAKI,MAAM;YAC1B,4BAA4B;YAC5B,MAAMC,oBAAoBF,KAAK,CAAC,oBAAoB;YACpD,MAAMG,kBAAkB,MAAM,IAAI,CAACC,UAAU,CAACC,aAAa,CAACC,oCAAc,EAAEC,IAAI,CAAC;gBAAEC,OAAO;oBAAEC,IAAIC,IAAAA,WAAE,EAACR;gBAAmB;YAAE;YACxH,IAAGF,KAAK,CAAC,cAAc,IAAIW,wBAAW,CAACC,SAAS,IAAIT,gBAAgBU,MAAM,IAAI,CAACb,KAAK,CAACH,KAAKiB,QAAQ,CAAC,EAAE;gBACnG,MAAMC,eAAeC,IAAAA,WAAG,EAACb,iBAAiB,CAACc,MAASA,IAAIC,IAAI,CAACC,WAAW;gBACxE,6BAA6B;gBAC7B,OAAOJ,aAAaK,OAAO,CAACtB,gBAAgB,CAAC;YAC/C,OAAO;gBACL,OAAO;YACT;QACF,EAAE,OAAOuB,GAAG;YACV,iBAAiB;YACjB,OAAO;QACT;QAEA,OAAO;IACT;IAEAC,eAAezB,IAAyB,EAAE;QACxC,OAAO,CAAC,EAAEA,KAAKiB,QAAQ,CAAC,aAAa,CAAC;IACxC;IA1BAS,YAAY,AAAQnB,UAAsB,CAAE;aAAxBA,aAAAA;IAAyB;AA2B/C;AA5BaV;IAFZ8B,IAAAA,mCAAmB,EAAC;QAAEN,MAAM;QAAwBO,OAAO;IAAK;IAChEC,IAAAA,kBAAU;;;eAEuB,mBAAU,4BAAV,mBAAU;;GAD/BhC"}