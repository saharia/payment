{"version":3,"sources":["../../../../src/database/migration/payment/1676277720000-CreatePaymentGatewayPlan.ts"],"sourcesContent":["import { defaultColumns } from \"../../default-column.migration\";\nimport { primaryColumns } from \"../../primary-column.migration\";\nimport { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\"\nimport { paymentTableName } from \"../../../common\";\n\nexport class CreatePaymentGatewayPlan1676277720000 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + paymentTableName.paymentGatewayPlan;\n  paymentGatewayTableName = this.tablePrefix + paymentTableName.paymentGateway;\n  paymentPlanTableName = this.tablePrefix + paymentTableName.paymentPlan;\n\n  paymentGatewayForeignKeyColumn = paymentTableName.paymentGateway + '_id';\n  paymentPlanForeignKeycolumn = paymentTableName.paymentPlan + '_id';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"payment gateway plan table migration is running -->\", this.tableName);\n\n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          ...primaryColumns,\n          {\n            name: \"percentage\",\n            type: \"integer\",\n            isNullable: false,\n            default: 0\n          },\n          {\n            name: this.paymentGatewayForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: this.paymentPlanForeignKeycolumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          ...defaultColumns\n        ],\n      }),\n      true,\n    );\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n    const paymentGatewayForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_plan_payment_gateway\",\n      columnNames: [this.paymentGatewayForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentGatewayTableName,\n    });\n    const paymentPlanForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_plan_payment_plan\",\n      columnNames: [this.paymentPlanForeignKeycolumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentPlanTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      paymentGatewayForeignKey,\n      paymentPlanForeignKey\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n\n    const paymentGatewayForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_plan_payment_gateway\",\n      columnNames: [this.paymentGatewayForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentGatewayTableName,\n    });\n    const paymentPlanForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_plan_payment_plan\",\n      columnNames: [this.paymentPlanForeignKeycolumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.paymentPlanTableName,\n    });\n    await queryRunner.dropForeignKeys(this.tableName, [\n      paymentGatewayForeignKey,\n      paymentPlanForeignKey\n    ]);\n    await queryRunner.dropTable(this.tableName);\n  }\n\n}\n"],"names":["CreatePaymentGatewayPlan1676277720000","up","queryRunner","console","log","tableName","createTable","Table","name","columns","primaryColumns","type","isNullable","default","paymentGatewayForeignKeyColumn","paymentPlanForeignKeycolumn","defaultColumns","clearSqlMemory","paymentGatewayForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","paymentGatewayTableName","paymentPlanForeignKey","paymentPlanTableName","createForeignKeys","down","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","paymentTableName","paymentGatewayPlan","paymentGateway","paymentPlan"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;wCALkB;wCACA;yBACyC;wBACvC;AAE1B,IAAA,AAAMA,wCAAN,MAAMA;IAUX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,uDAAuD,IAAI,CAACC,SAAS;QAEjF,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;mBACJC,sCAAc;gBACjB;oBACEF,MAAM;oBACNG,MAAM;oBACNC,YAAY;oBACZC,SAAS;gBACX;gBACA;oBACEL,MAAM,IAAI,CAACM,8BAA8B;oBACzCH,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM,IAAI,CAACO,2BAA2B;oBACtCJ,MAAM;oBACNC,YAAY;gBACd;mBACGI,sCAAc;aAClB;QACH,IACA;QAGF,4EAA4E;QAC5Ed,YAAYe,cAAc;QAC1B,MAAMC,2BAA2B,IAAIC,wBAAe,CAAC;YACnDX,MAAM;YACNY,aAAa;gBAAC,IAAI,CAACN,8BAA8B;aAAC;YAClDO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,uBAAuB;QACnD;QACA,MAAMC,wBAAwB,IAAIL,wBAAe,CAAC;YAChDX,MAAM;YACNY,aAAa;gBAAC,IAAI,CAACL,2BAA2B;aAAC;YAC/CM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,oBAAoB;QAChD;QAEA,MAAMvB,YAAYwB,iBAAiB,CAAC,IAAI,CAACrB,SAAS,EAAE;YAClDa;YACAM;SACD;IACH;IAEA,MAAaG,KAAKzB,WAAwB,EAAiB;QAEzD,MAAMgB,2BAA2B,IAAIC,wBAAe,CAAC;YACnDX,MAAM;YACNY,aAAa;gBAAC,IAAI,CAACN,8BAA8B;aAAC;YAClDO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,uBAAuB;QACnD;QACA,MAAMC,wBAAwB,IAAIL,wBAAe,CAAC;YAChDX,MAAM;YACNY,aAAa;gBAAC,IAAI,CAACL,2BAA2B;aAAC;YAC/CM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,oBAAoB;QAChD;QACA,MAAMvB,YAAY0B,eAAe,CAAC,IAAI,CAACvB,SAAS,EAAE;YAChDa;YACAM;SACD;QACD,MAAMtB,YAAY2B,SAAS,CAAC,IAAI,CAACxB,SAAS;IAC5C;;aA9EAyB,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrE5B,YAAY,IAAI,CAACyB,WAAW,GAAGI,wBAAgB,CAACC,kBAAkB;aAClEZ,0BAA0B,IAAI,CAACO,WAAW,GAAGI,wBAAgB,CAACE,cAAc;aAC5EX,uBAAuB,IAAI,CAACK,WAAW,GAAGI,wBAAgB,CAACG,WAAW;aAEtEvB,iCAAiCoB,wBAAgB,CAACE,cAAc,GAAG;aACnErB,8BAA8BmB,wBAAgB,CAACG,WAAW,GAAG;;AA0E/D"}