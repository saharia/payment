{"version":3,"sources":["../../../../src/database/migration/payment/1676277397916-CreateBrand.ts"],"sourcesContent":["import { values } from 'lodash';\nimport { paymentTableName, authenticationTableName } from '../../../common';\nimport { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\nimport { BrandType, PaymentMode } from \"../../../orm-config\";\nimport { defaultColumns } from \"../../default-column.migration\";\nimport { primaryColumns } from \"../../primary-column.migration\";\n\nexport class CreateBrand1676277397916 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + paymentTableName.brand;\n  userTableName = this.tablePrefix + authenticationTableName.user;\n  \n  userForeignKeyColumn = authenticationTableName.user + '_id';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"brand table migration is running -->\", this.tableName);\n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          ...primaryColumns,\n          {\n            name: \"brand_type\",\n            type: \"enum\",\n            enum: values(BrandType),\n            default: `'${BrandType.WEBSITE}'`,\n            isNullable: false\n          },\n          {\n            name: \"name\",\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: \"payment_mode\",\n            type: \"enum\",\n            enum: values(PaymentMode),\n            default: `'${PaymentMode.SANDBOX}'`,\n            isNullable: false\n          },\n          {\n            name: \"api_key\",\n            type: \"text\",\n            isNullable: false\n          },\n          {\n            name: this.userForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          ...defaultColumns\n        ],\n      }),\n      true,\n    )\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_brand_user_id\",\n      columnNames: [this.userForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.userTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      userForeignKey,\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"brand table down migration is running -->\");\n    const table = await queryRunner.getTable(this.tableName);\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_brand_user_id\",\n      columnNames: [this.userForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.userTableName,\n    });\n    await queryRunner.dropForeignKeys(table, [userForeignKey]);\n\n    await queryRunner.dropTable(this.tableName);\n  }\n\n}\n"],"names":["CreateBrand1676277397916","up","queryRunner","console","log","tableName","createTable","Table","name","columns","primaryColumns","type","enum","values","BrandType","default","WEBSITE","isNullable","PaymentMode","SANDBOX","userForeignKeyColumn","defaultColumns","clearSqlMemory","userForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","userTableName","createForeignKeys","down","table","getTable","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","paymentTableName","brand","authenticationTableName","user"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAOaA;;;eAAAA;;;wBAPU;wBACmC;yBACc;2BACjC;wCACR;wCACA;AAExB,IAAA,AAAMA,2BAAN,MAAMA;IAQX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,wCAAwC,IAAI,CAACC,SAAS;QAClE,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;mBACJC,sCAAc;gBACjB;oBACEF,MAAM;oBACNG,MAAM;oBACNC,MAAMC,IAAAA,cAAM,EAACC,oBAAS;oBACtBC,SAAS,CAAC,CAAC,EAAED,oBAAS,CAACE,OAAO,CAAC,CAAC,CAAC;oBACjCC,YAAY;gBACd;gBACA;oBACET,MAAM;oBACNG,MAAM;oBACNM,YAAY;gBACd;gBACA;oBACET,MAAM;oBACNG,MAAM;oBACNC,MAAMC,IAAAA,cAAM,EAACK,sBAAW;oBACxBH,SAAS,CAAC,CAAC,EAAEG,sBAAW,CAACC,OAAO,CAAC,CAAC,CAAC;oBACnCF,YAAY;gBACd;gBACA;oBACET,MAAM;oBACNG,MAAM;oBACNM,YAAY;gBACd;gBACA;oBACET,MAAM,IAAI,CAACY,oBAAoB;oBAC/BT,MAAM;oBACNM,YAAY;gBACd;mBACGI,sCAAc;aAClB;QACH,IACA;QAGF,4EAA4E;QAC5EnB,YAAYoB,cAAc;QAE1B,MAAMC,iBAAiB,IAAIC,wBAAe,CAAC;YACzChB,MAAM;YACNiB,aAAa;gBAAC,IAAI,CAACL,oBAAoB;aAAC;YACxCM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,aAAa;QACzC;QAEA,MAAM1B,YAAY2B,iBAAiB,CAAC,IAAI,CAACxB,SAAS,EAAE;YAClDkB;SACD;IACH;IAEA,MAAaO,KAAK5B,WAAwB,EAAiB;QACzDC,QAAQC,GAAG,CAAC;QACZ,MAAM2B,QAAQ,MAAM7B,YAAY8B,QAAQ,CAAC,IAAI,CAAC3B,SAAS;QACvD,MAAMkB,iBAAiB,IAAIC,wBAAe,CAAC;YACzChB,MAAM;YACNiB,aAAa;gBAAC,IAAI,CAACL,oBAAoB;aAAC;YACxCM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,aAAa;QACzC;QACA,MAAM1B,YAAY+B,eAAe,CAACF,OAAO;YAACR;SAAe;QAEzD,MAAMrB,YAAYgC,SAAS,CAAC,IAAI,CAAC7B,SAAS;IAC5C;;aA3EA8B,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrEjC,YAAY,IAAI,CAAC8B,WAAW,GAAGI,wBAAgB,CAACC,KAAK;aACrDZ,gBAAgB,IAAI,CAACO,WAAW,GAAGM,+BAAuB,CAACC,IAAI;aAE/DtB,uBAAuBqB,+BAAuB,CAACC,IAAI,GAAG;;AAyExD"}