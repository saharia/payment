{"version":3,"sources":["../../../../src/database/migration/payment/1676277745166-CreatePaymentGatewayKey.ts"],"sourcesContent":["import { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\nimport { defaultColumns } from \"../../default-column.migration\";\nimport { primaryColumns } from \"../../primary-column.migration\";\nimport { paymentTableName } from '../../../common';\n\nexport class CreatePaymentGatewayKey1676277745166 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + paymentTableName.paymentGatewayKey;\n  brandTableName = this.tablePrefix + paymentTableName.brand;\n  \n  brandForeignKeyColumn = paymentTableName.brand + '_id';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"payment gateway key table migration is running -->\", this.tableName);\n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          ...primaryColumns,\n          {\n            name: \"client_id\",\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: \"client_secret\",\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: \"payment_gateway_id\",\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: this.brandForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          ...defaultColumns\n        ],\n      }),\n      true,\n    );\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n\n    const brandForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_key_brand_id\",\n      columnNames: [this.brandForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.brandTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      brandForeignKey,\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"payment gateway key table down migration is running -->\");\n    const table = await queryRunner.getTable(this.tableName);\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_payment_gateway_key_brand_id\",\n      columnNames: [this.brandForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.brandTableName,\n    });\n    await queryRunner.dropForeignKeys(table, [userForeignKey]);\n    await queryRunner.dropTable(this.tableName);\n  }\n\n\n}\n"],"names":["CreatePaymentGatewayKey1676277745166","up","queryRunner","console","log","tableName","createTable","Table","name","columns","primaryColumns","type","isNullable","brandForeignKeyColumn","defaultColumns","clearSqlMemory","brandForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","brandTableName","createForeignKeys","down","table","getTable","userForeignKey","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","paymentTableName","paymentGatewayKey","brand"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;yBAL2D;wCACzC;wCACA;wBACE;AAE1B,IAAA,AAAMA,uCAAN,MAAMA;IAQX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,sDAAsD,IAAI,CAACC,SAAS;QAChF,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;mBACJC,sCAAc;gBACjB;oBACEF,MAAM;oBACNG,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM;oBACNG,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM;oBACNG,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM,IAAI,CAACK,qBAAqB;oBAChCF,MAAM;oBACNC,YAAY;gBACd;mBACGE,sCAAc;aAClB;QACH,IACA;QAGF,4EAA4E;QAC5EZ,YAAYa,cAAc;QAE1B,MAAMC,kBAAkB,IAAIC,wBAAe,CAAC;YAC1CT,MAAM;YACNU,aAAa;gBAAC,IAAI,CAACL,qBAAqB;aAAC;YACzCM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,cAAc;QAC1C;QAEA,MAAMnB,YAAYoB,iBAAiB,CAAC,IAAI,CAACjB,SAAS,EAAE;YAClDW;SACD;IACH;IAEA,MAAaO,KAAKrB,WAAwB,EAAiB;QACzDC,QAAQC,GAAG,CAAC;QACZ,MAAMoB,QAAQ,MAAMtB,YAAYuB,QAAQ,CAAC,IAAI,CAACpB,SAAS;QACvD,MAAMqB,iBAAiB,IAAIT,wBAAe,CAAC;YACzCT,MAAM;YACNU,aAAa;gBAAC,IAAI,CAACL,qBAAqB;aAAC;YACzCM,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,cAAc;QAC1C;QACA,MAAMnB,YAAYyB,eAAe,CAACH,OAAO;YAACE;SAAe;QACzD,MAAMxB,YAAY0B,SAAS,CAAC,IAAI,CAACvB,SAAS;IAC5C;;aAjEAwB,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrE3B,YAAY,IAAI,CAACwB,WAAW,GAAGI,wBAAgB,CAACC,iBAAiB;aACjEb,iBAAiB,IAAI,CAACQ,WAAW,GAAGI,wBAAgB,CAACE,KAAK;aAE1DtB,wBAAwBoB,wBAAgB,CAACE,KAAK,GAAG;;AAgEnD"}