{"version":3,"sources":["../../../../src/database/migration/authentication/1676276665154-CreateUserRole.ts"],"sourcesContent":["import { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\nimport { authenticationTableName } from \"../../../common\";\n\nexport class CreateUserRole1676276665154 implements MigrationInterface {\n\n  tablePrefix = (process.env.TABLE_PREFIX ? process.env.TABLE_PREFIX : '');\n  tableName = this.tablePrefix + authenticationTableName.userRole;\n  roleTableName = this.tablePrefix + authenticationTableName.role;\n  userTableName = this.tablePrefix + authenticationTableName.user;\n\n  roleForeignKeyColumn = authenticationTableName.role + '_id';\n  userForeignKeyColumn = authenticationTableName.user + '_id';\n  \n  public async up(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"user_role table migration is running -->\", this.tableName);\n    \n    await queryRunner.createTable(\n      new Table({\n        name: this.tableName,\n        columns: [\n          {\n            name: this.roleForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n          {\n            name: this.userForeignKeyColumn,\n            type: \"varchar\",\n            isNullable: false\n          },\n        ],\n      }),\n      true,\n    );\n    const table = await queryRunner.getTable(this.tableName);\n\n    // clear sqls in memory to avoid removing tables when down queries executed.\n    queryRunner.clearSqlMemory();\n\n    const userForeignKey = new TableForeignKey({\n        name: \"FK_user_role_user_id\",\n        columnNames: [this.userForeignKeyColumn],\n        referencedColumnNames: [\"id\"],\n        referencedTableName: this.userTableName,\n    });\n    const roleForeignKey = new TableForeignKey({\n      name: \"FK_user_role_role_id\",\n      columnNames: [this.roleForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.roleTableName,\n    });\n    \n    await queryRunner.createForeignKeys(this.tableName, [\n      userForeignKey,\n      roleForeignKey\n    ]);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log(\"user_role table down migration is running -->\");\n    const table = await queryRunner.getTable(this.tableName);\n    const userForeignKey = new TableForeignKey({\n      name: \"FK_user_role_user_id\",\n      columnNames: [this.userForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.userTableName,\n    });\n    const roleForeignKey = new TableForeignKey({\n      name: \"FK_user_role_role_id\",\n      columnNames: [this.roleForeignKeyColumn],\n      referencedColumnNames: [\"id\"],\n      referencedTableName: this.roleTableName,\n    });\n    await queryRunner.dropForeignKeys(table, [userForeignKey, roleForeignKey]);\n    await queryRunner.dropTable(this.tableName);\n  }\n}\n"],"names":["CreateUserRole1676276665154","up","queryRunner","console","log","tableName","createTable","Table","name","columns","roleForeignKeyColumn","type","isNullable","userForeignKeyColumn","table","getTable","clearSqlMemory","userForeignKey","TableForeignKey","columnNames","referencedColumnNames","referencedTableName","userTableName","roleForeignKey","roleTableName","createForeignKeys","down","dropForeignKeys","dropTable","tablePrefix","process","env","TABLE_PREFIX","authenticationTableName","userRole","role","user"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAGaA;;;eAAAA;;;yBAH2D;wBAChC;AAEjC,IAAA,AAAMA,8BAAN,MAAMA;IAUX,MAAaC,GAAGC,WAAwB,EAAiB;QACvDC,QAAQC,GAAG,CAAC,4CAA4C,IAAI,CAACC,SAAS;QAEtE,MAAMH,YAAYI,WAAW,CAC3B,IAAIC,cAAK,CAAC;YACRC,MAAM,IAAI,CAACH,SAAS;YACpBI,SAAS;gBACP;oBACED,MAAM,IAAI,CAACE,oBAAoB;oBAC/BC,MAAM;oBACNC,YAAY;gBACd;gBACA;oBACEJ,MAAM,IAAI,CAACK,oBAAoB;oBAC/BF,MAAM;oBACNC,YAAY;gBACd;aACD;QACH,IACA;QAEF,MAAME,QAAQ,MAAMZ,YAAYa,QAAQ,CAAC,IAAI,CAACV,SAAS;QAEvD,4EAA4E;QAC5EH,YAAYc,cAAc;QAE1B,MAAMC,iBAAiB,IAAIC,wBAAe,CAAC;YACvCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACN,oBAAoB;aAAC;YACxCO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,aAAa;QAC3C;QACA,MAAMC,iBAAiB,IAAIL,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACT,oBAAoB;aAAC;YACxCU,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,aAAa;QACzC;QAEA,MAAMtB,YAAYuB,iBAAiB,CAAC,IAAI,CAACpB,SAAS,EAAE;YAClDY;YACAM;SACD;IACH;IAEA,MAAaG,KAAKxB,WAAwB,EAAiB;QACzDC,QAAQC,GAAG,CAAC;QACZ,MAAMU,QAAQ,MAAMZ,YAAYa,QAAQ,CAAC,IAAI,CAACV,SAAS;QACvD,MAAMY,iBAAiB,IAAIC,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACN,oBAAoB;aAAC;YACxCO,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACC,aAAa;QACzC;QACA,MAAMC,iBAAiB,IAAIL,wBAAe,CAAC;YACzCV,MAAM;YACNW,aAAa;gBAAC,IAAI,CAACT,oBAAoB;aAAC;YACxCU,uBAAuB;gBAAC;aAAK;YAC7BC,qBAAqB,IAAI,CAACG,aAAa;QACzC;QACA,MAAMtB,YAAYyB,eAAe,CAACb,OAAO;YAACG;YAAgBM;SAAe;QACzE,MAAMrB,YAAY0B,SAAS,CAAC,IAAI,CAACvB,SAAS;IAC5C;;aAtEAwB,cAAeC,QAAQC,GAAG,CAACC,YAAY,GAAGF,QAAQC,GAAG,CAACC,YAAY,GAAG;aACrE3B,YAAY,IAAI,CAACwB,WAAW,GAAGI,+BAAuB,CAACC,QAAQ;aAC/DV,gBAAgB,IAAI,CAACK,WAAW,GAAGI,+BAAuB,CAACE,IAAI;aAC/Db,gBAAgB,IAAI,CAACO,WAAW,GAAGI,+BAAuB,CAACG,IAAI;aAE/D1B,uBAAuBuB,+BAAuB,CAACE,IAAI,GAAG;aACtDtB,uBAAuBoB,+BAAuB,CAACG,IAAI,GAAG;;AAiExD"}